#####
DAY 2
#####

=====================
WORKING WITH STRINGS:
=====================


>>> str1='Hello World!'
>>> print(str1)
Hello World!

>>> type(str1)
<class 'str'>

>>> print(str1)
Hello World!

>>> print(str1[0])
H

>>> print(str1[2:])
llo World!

>>> print(str1[2:4])
ll

>>> print(str1.split(" "))
['Hello', 'World!']
>>>

-- BUILT-IN FUNCTIONS 
len()
str.capitalize()
str.count(substr, start = 0, end = len(string))
str.find(substr, start, end) or str.rfind(substr, start, end)
str.lower() or str.upper()
str.replace(old, new, max)
str.split()


BOOLEAN:

str.startswith(substr, start, end) or str.endswith(substr, start,end)
str.isdigit() 
str.islower() or str.isupper()
str.translate(table, delete_chars)
reversed(str)


>>> str1="hello"
>>> print(str1[::-1])
olleh
>>>



=======
TUPLES:
=======

-- enclosed by parenthesis "()" 
-- fixed elements (cannot be updated)
-- can be fixed (heterogenous)

##Declaration:
>>> tuplexmple = ('abcd', 786, 2.23, 'john', 70.2)

##Manipulations:
>>> print(tuplexmple)
('abcd', 786, 2.23, 'john', 70.2)
>>> print(tuplexmple[0])
abcd
>>> print(tuplexmple[1:3])
(786, 2.23)
>>> print(tuplexmple[1:])
(786, 2.23, 'john', 70.2)
>>> print(tuplexmple * 2)
('abcd', 786, 2.23, 'john', 70.2, 'abcd', 786, 2.23, 'john', 70.2)
>>>



#### Adding tuple in an existing list:
>>> e = (1, 2, 3, 4)
>>> c = ['john', 'david', 1, 2, 3]
>>> c.append(e)
>>> print(c)
['john', 'david', 1, 2, 3, (1, 2, 3, 4)]
>>>


==========
DICTIONARY
==========

-- kind of hash table type
-- key-value pair

{key1:value1, key2:value2, key3:value3, keyN:valueN}

>>> dictiosample = {}
>>> dictiosample['one'] = "This is one"
>>> dictiosample[2] = "This is two"
>>> tinydictio = {'name': 'john', 'code':6734, 'dept': 'sales'}
>>> print(dictiosample['one'])
This is one
>>> print(dictiosample[2])
This is two
>>> print(tinydictio)
{'name': 'john', 'code': 6734, 'dept': 'sales'}
>>> print(tinydictio.keys())
dict_keys(['name', 'code', 'dept'])
>>> print(tinydictio.values())
dict_values(['john', 6734, 'sales'])
>>>


>>> type(tinydictio)
<class 'dict'>
>>>



========
COMMENTS
========

## <-- THIS IS A COMMENT

"""" THIS IS ALSO A COMMENT """"


>>> import math
>>> print(math.__doc__)
This module provides access to the mathematical functions
defined by the C standard.
>>>


>>> import os
>>> print(os.__doc__)
OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix or nt, e.g. unlink, stat, etc.
  - os.path is either posixpath or ntpath
  - os.name is either 'posix' or 'nt'
  - os.curdir is a string representing the current directory (always '.')
  - os.pardir is a string representing the parent directory (always '..')
  - os.sep is the (or a most common) pathname separator ('/' or '\\')
  - os.extsep is the extension separator (always '.')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\r' or '\n' or '\r\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).


DOCUMENTATION:

cat exercise7.py
"""
This is the exercise 7
Python Programming Class of 2020
"""

x=float(input("Input amount: "))
y=float(input("Enter conversion rate (1USD to PHP): "))

while True:
    print("\n")
    print("[A/a] USD to PHP")
    print("[B/b] PHP to USD")

    z=input("Please select character: ")

    if z == 'a' or z == "A":
        answr = (x/y)
        print("\n")
        print("%d PHP is equal to %.2fUSD" % (x, answr))
        break
    elif z == 'b' or z == 'B':
        answr=(x*y)
        print("\n")
        print("%d USD is equal to %.2f PHP" % (x,answr))
        break

----------------------------------------

>>> import exercise7
Input amount: 500
Enter conversion rate (1USD to PHP): 30


[A/a] USD to PHP
[B/b] PHP to USD
Please select character: b


500 USD is equal to 15000.00 PHP
>>> print(exercise7.__doc__)

This is the exercise 7
Python Programming Class of 2020

>>>


========================
FUNCTIONS and PARAMETERS
========================

def <function_name>(<parameters>):

def func1():
	.....

def func2(args1,args2):
	.....


### Function without parameters:
>>> def print_none():
...     print("Print NOTHING")
...
>>> 
>>> print_none()
Print NOTHING
>>> print_none()
Print NOTHING
>>> print_none()
Print NOTHING
>>>


### Getting 'LIST' as parameters
def print_two(*args): 
   arg1, arg2 = args
   print("arg1: %r, arg2: %r" % (arg1, arg2))


### Getting 'DICTIONARY' as parameters
def print_kw(**kwargs): 
   print(kwargs)

>>> print_kw(name=“Bearbrand”, milk=“Nay”)
>>> {“name”: “Bearbrand”, “milk”:  “Nay”}


### Functions and Return:

sample1:
>>> def add_numbers(a,b):
...     return a+b
...
>>> add_numbers(2,2)
4
>>>


sample1.1:
>>> add_numbers(2,add_numbers(3,add_numbers(2,4)))
11
>>>

sample2:

>>> def add_numbers(a,b):
...     print("Print Muna")
...     return a+b
...
>>> add_numbers(5,50)
Print Muna
55
>>>


sample3:
>>> add_numbers(3,4) + add_numbers(5,19)
Print Muna
Print Muna
31
>>>


===========================
OBJECT ORIENTED PROGRAMMING
===========================

---- CLASSES / OBJECTS

---- METHOD(FUNCTIONS)




=======
MODULES
=======
-- Locating Modules:
	- @ the current directory
	- @ Environment shell variable PTYHONPATH
	- if all else fails, Python checks the default path. On Unix (/usr/local/lib/python)



===============
LAMBDA FUNCTION
===============
	- useful to functional programming
	- 3 most commonly used
	- built-in functions: filter() and map() only in python3
			    : reduce() only in python2 


Syntax:
	lambda argument/s: expressions

Sample:

lmda1 = lambda x: x**2


y = lambda x: x ** 2 
y(5) #computes the square of 5

sum = lambda a, b: a + b 
sum(1,2) #computes the sum of 1 and 2


 --- FILTER

	> offers an elegant way to filter out all the elements of a list, for which the function returns True
	> function returns a Boolean value, i.e. either True or False. This function will be applied to every element of the sequence. 
	  Only if function returns True will the element of the sequence be included in the result list

Syntax: 
	filter(function, sequence)


>>> alist= [0,1,1,2,3,5,8,13,21,34,55] 
>>> result = filter(lambda x: x % 2, alist) 
>>> print result 
[1, 1, 3, 5, 13, 21, 55] 
>>> result = filter(lambda x: x % 2 == 0, alist) >>> print result 
[0, 2, 8, 34] 
>>>


>>> alist = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
>>> odd = filter(lambda x: x%2, alist)
>>> print(list(odd))
[1, 3, 5, 7, 9, 11, 13, 15]
>>>



 --- MAP

	> map(function, sequence)
	> calls function(item) for each of the sequence’s item and returns a list of the return values

Syntax:
	map(function, sequence)

>>> list(map(lambda x: x*x*x, range(1,6)))
[1, 8, 27, 64, 125]
>>> a = [1,2,3,4] 
>>> b = [17,12,11,10]
>>> list(map(lambda x, y: x + y, a, b))
[18, 14, 14, 14]



 --- REDUCE (only in python2)

	> continually applies the function to the sequence. It returns a single value

Syntax:
	reduce(function, sequence [, start_value])
	